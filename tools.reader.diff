commit 7770bd4d2d1182fbae253cc263d92b6fa68982fc
Author: Arne Brasseur <arne@arnebrasseur.net>
Date:   Fri Nov 21 12:57:15 2014 +0100

    Apply feature expressions patch, see http://dev.clojure.org/jira/browse/TRDR-14 (tools.reader-feature-expressions-3.diff)

diff --git a/pom.xml b/pom.xml
index 880dff9..a120229 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,66 +1,117 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<?xml version="1.0" encoding="UTF-8"?><project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
   <modelVersion>4.0.0</modelVersion>
+  <parent>
+    <artifactId>pom.contrib</artifactId>
+    <groupId>org.clojure</groupId>
+    <version>0.1.2</version>
+    <relativePath/>
+  </parent>
+  <groupId>org.clojure</groupId>
   <artifactId>tools.reader</artifactId>
-  <version>0.8.13-SNAPSHOT</version>
-  <name>${artifactId}</name>
-  <description>A Clojure reader in Clojure </description>
+  <packaging>jar</packaging>
+  <version>0.8.13-fx</version>
+  <name>tools.reader</name>
+  <description>A Clojure reader in Clojure</description>
   <url>https://github.com/clojure/tools.reader</url>
-
-  <build>
-    <plugins>
-      <plugin>
-        <groupId>com.theoryinpractise</groupId>
-        <artifactId>clojure-maven-plugin</artifactId>
-        <version>1.3.13</version>
-        <configuration>
-            <temporaryOutputDirectory>false</temporaryOutputDirectory>
-        </configuration>
-        <executions>
-          <execution>
-            <id>clojure-compile</id>
-            <phase>compile</phase>
-            <goals>
-              <goal>compile</goal>
-            </goals>
-            <configuration>
-              <compileDeclaredNamespaceOnly>true</compileDeclaredNamespaceOnly>
-              <namespaces>
-                <namespace>clojure.tools.reader.impl.ExceptionInfo</namespace>
-              </namespaces>
-            </configuration>
-          </execution>
-        </executions>
-      </plugin>
-    </plugins>
-  </build>
-
   <licenses>
     <license>
-      <name>Eclipse Public License 1.0</name>
-      <url>http://opensource.org/licenses/eclipse-1.0.php</url>
-      <distribution>repo</distribution>
+      <name>Eclipse Public License</name>
+      <url>http://www.eclipse.org/legal/epl-v10.html</url>
     </license>
   </licenses>
-
-  <parent>
-    <groupId>org.clojure</groupId>
-    <artifactId>pom.contrib</artifactId>
-    <version>0.1.2</version>
-  </parent>
-
-  <developers>
-    <developer>
-      <id>Bronsa</id>
-      <name>Nicola Mometto</name>
-      <timezone>+1</timezone>
-    </developer>
-  </developers>
-
   <scm>
     <connection>scm:git:git://github.com/clojure/tools.reader.git</connection>
-    <developerConnection>scm:git:git://github.com/clojure/tools.reader.git</developerConnection>
-    <url>http://github.com/clojure/tools.reader</url>
-    <tag>HEAD</tag>
+    <developerConnection>scm:git:ssh://git@github.com/clojure/tools.reader.git</developerConnection>
+    <tag>b62ce9964a9770578b5f2179a2166cbfc956dfe8
+</tag>
+    <url>https://github.com/clojure/tools.reader</url>
   </scm>
+  <build>
+    <sourceDirectory>src/main/clojure</sourceDirectory>
+    <testSourceDirectory>src/test/clojure</testSourceDirectory>
+    <resources>
+      <resource>
+        <directory>resources</directory>
+      </resource>
+    </resources>
+    <testResources>
+      <testResource>
+        <directory>dev-resources</directory>
+      </testResource>
+      <testResource>
+        <directory>resources</directory>
+      </testResource>
+    </testResources>
+    <directory>target</directory>
+    <outputDirectory>target/classes</outputDirectory>
+    <plugins/>
+  </build>
+  <repositories>
+    <repository>
+      <id>central</id>
+      <url>https://repo1.maven.org/maven2/</url>
+      <snapshots>
+        <enabled>false</enabled>
+      </snapshots>
+      <releases>
+        <enabled>true</enabled>
+      </releases>
+    </repository>
+    <repository>
+      <id>clojars</id>
+      <url>https://clojars.org/repo/</url>
+      <snapshots>
+        <enabled>true</enabled>
+      </snapshots>
+      <releases>
+        <enabled>true</enabled>
+      </releases>
+    </repository>
+    <repository>
+      <id>sonatype-oss-public</id>
+      <url>https://oss.sonatype.org/content/groups/public/</url>
+      <snapshots>
+        <enabled>true</enabled>
+      </snapshots>
+      <releases>
+        <enabled>true</enabled>
+      </releases>
+    </repository>
+  </repositories>
+  <dependencies>
+    <dependency>
+      <groupId>org.clojure</groupId>
+      <artifactId>clojure</artifactId>
+      <version>1.7.0-fx</version>
+    </dependency>
+    <dependency>
+      <groupId>org.clojure</groupId>
+      <artifactId>tools.nrepl</artifactId>
+      <version>0.2.6</version>
+      <exclusions>
+        <exclusion>
+          <groupId>org.clojure</groupId>
+          <artifactId>clojure</artifactId>
+        </exclusion>
+      </exclusions>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>clojure-complete</groupId>
+      <artifactId>clojure-complete</artifactId>
+      <version>0.2.3</version>
+      <exclusions>
+        <exclusion>
+          <groupId>org.clojure</groupId>
+          <artifactId>clojure</artifactId>
+        </exclusion>
+      </exclusions>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
 </project>
+
+<!-- This file was autogenerated by Leiningen.
+  Please do not edit it directly; instead edit project.clj and regenerate it.
+  It should not be considered canonical data. For more information see
+  https://github.com/technomancy/leiningen -->
diff --git a/project.clj b/project.clj
index c963a4f..6a878dd 100644
--- a/project.clj
+++ b/project.clj
@@ -1,4 +1,4 @@
-(defproject org.clojure/tools.reader "0.8.13-SNAPSHOT"
+(defproject org.clojure/tools.reader "0.8.13-fx"
   :description "A Clojure reader in Clojure"
   :parent [org.clojure/pom.contrib "0.1.2"]
   :url "https://github.com/clojure/tools.reader"
@@ -8,12 +8,12 @@
   :test-paths ["src/test/clojure"]
   :aot [clojure.tools.reader.impl.ExceptionInfo]
   :repositories {"sonatype-oss-public" "https://oss.sonatype.org/content/groups/public/"}
-  :dependencies [[org.clojure/clojure "1.7.0-master-SNAPSHOT"]]
+  :dependencies [[org.clojure/clojure "1.7.0-fx"]]
   :profiles {:1.3 {:dependencies [[org.clojure/clojure "1.3.0"]]}
              :1.4 {:dependencies [[org.clojure/clojure "1.4.0"]]}
              :1.5 {:dependencies [[org.clojure/clojure "1.5.1"]]}
              :1.6 {:dependencies [[org.clojure/clojure "1.6.0"]]}
-             :1.7 {:dependencies [[org.clojure/clojure "1.7.0-master-SNAPSHOT"]]}}
+             :1.7 {:dependencies [[org.clojure/clojure "1.7.0-fx"]]}}
   :aliases {"test-all" ["with-profile" "test,1.3:test,1.4:test,1.5:test,1.6:test,1.7" "test"]
             "check-all" ["with-profile" "1.3:1.4:1.5:1.6:1.7" "check"]}
   :min-lein-version "2.0.0")
diff --git a/src/main/clojure/clojure/tools/reader.clj b/src/main/clojure/clojure/tools/reader.clj
index b69b047..6d2e23a 100644
--- a/src/main/clojure/clojure/tools/reader.clj
+++ b/src/main/clojure/clojure/tools/reader.clj
@@ -11,7 +11,7 @@
   clojure.tools.reader
   (:refer-clojure :exclude [read read-line read-string char
                             default-data-readers *default-data-reader-fn*
-                            *read-eval* *data-readers*])
+                            *read-eval* *data-readers* *features* *suppress-read*])
   (:use clojure.tools.reader.reader-types
         [clojure.tools.reader.impl utils commons])
   (:require [clojure.tools.reader.default-data-readers :as data-readers])
@@ -29,6 +29,8 @@
          ^:dynamic *read-eval*
          ^:dynamic *data-readers*
          ^:dynamic *default-data-reader-fn*
+         ^:dynamic *features*
+         ^:dynamic *suppress-read*
          default-data-readers)
 
 (defn- macro-terminating? [ch]
@@ -55,9 +57,7 @@
   (if-let [ch (read-char rdr)]
     (if-let [dm (dispatch-macros ch)]
       (dm rdr ch)
-      (if-let [obj (read-tagged (doto rdr (unread ch)) ch)] ;; ctor reader is implemented as a taggged literal
-        obj
-        (reader-error rdr "No dispatch macro for " ch)))
+      (read-tagged (doto rdr (unread ch)) ch)) ;; ctor reader is implemented as a taggged literal
     (reader-error rdr "EOF while reading character")))
 
 (defn- read-unmatched-delimiter
@@ -591,6 +591,29 @@
     (-> (read rdr true nil true)
       syntax-quote*)))
 
+(defn- supported-feature? [expr]
+  (cond
+   (symbol? expr)
+   (contains? *features* (keyword expr))
+   (list? expr)
+   (let [[op & r] expr]
+     (condp = op
+       'and (or (empty? r)
+                (every? supported-feature? r))
+       'not (not (supported-feature? (first r)))
+       'or (and (not (empty? r))
+                (not (not-any? supported-feature? r)))
+       (throw (str "Invalid feature expression operator: " op))))
+   :else (throw (str "Invalid feature expression: " expr))))
+
+(defn read-feature
+  [rdr mode]
+  (let [test (read rdr true nil true)]
+    (if (= (supported-feature? test) (= mode \+))
+      (read rdr true nil true)
+      (binding [*suppress-read* true]
+        (read-discard rdr nil)))))
+
 (defn- macros [ch]
   (case ch
     \" read-string*
@@ -623,6 +646,8 @@
     \" read-regex
     \! read-comment
     \_ read-discard
+    \+ read-feature
+    \- read-feature
     nil))
 
 (defn- read-tagged* [rdr tag f]
@@ -666,14 +691,16 @@
   (let [tag (read rdr true nil false)]
     (if-not (symbol? tag)
       (reader-error rdr "Reader tag must be a symbol"))
-    (if-let [f (or (*data-readers* tag)
-                   (default-data-readers tag))]
-      (read-tagged* rdr tag f)
-      (if (.contains (name tag) ".")
-        (read-ctor rdr tag)
-        (if-let [f *default-data-reader-fn*]
-          (f tag (read rdr true nil true))
-          (reader-error rdr "No reader function for tag " (name tag)))))))
+    (if *suppress-read*
+      (do (read-discard rdr tag) nil) ;; throw away form
+      (if-let [f (or (*data-readers* tag)
+                     (default-data-readers tag))]
+        (read-tagged* rdr tag f)
+        (if (.contains (name tag) ".")
+          (read-ctor rdr tag)
+          (if-let [f *default-data-reader-fn*]
+            (f tag (read rdr true nil true))
+            (reader-error rdr "No reader function for tag " (name tag))))))))
 
 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 ;; Public API
@@ -711,6 +738,10 @@
    will be thrown for the unknown tag."
   nil)
 
+(def ^:dynamic *suppress-read* false)
+
+(def ^:dynamic *features* #{})
+
 (def default-data-readers
   "Default map of data reader functions provided by Clojure.
    May be overridden by binding *data-readers*"
diff --git a/src/test/clojure/clojure/tools/reader_test.clj b/src/test/clojure/clojure/tools/reader_test.clj
index c41ed51..3dad100 100644
--- a/src/test/clojure/clojure/tools/reader_test.clj
+++ b/src/test/clojure/clojure/tools/reader_test.clj
@@ -1,7 +1,7 @@
 (ns clojure.tools.reader-test
-  (:refer-clojure :exclude [read-string *default-data-reader-fn*])
-  (:use [clojure.tools.reader :only [read-string *default-data-reader-fn*]]
-        [clojure.test :only [deftest is]])
+  (:refer-clojure :exclude [read-string *default-data-reader-fn* *features*])
+  (:use [clojure.tools.reader :only [read-string *default-data-reader-fn* *features*]]
+        [clojure.test :only [deftest is are]])
   (:import clojure.lang.BigInt))
 
 (load "common_tests")
@@ -88,3 +88,47 @@
 
 (deftest read-ctor
   (is (= "foo" (read-string "#java.lang.String[\"foo\"]"))))
+
+(deftest read-features
+  (binding [*features* #{:clj}]
+    (are [out s] (= out (read-string s))
+
+         ["x"] "[#+clj \"x\"]"
+         ["a" "x"] "[\"a\" #+clj \"x\"]"
+         [] "[#+cljs \"x\"]"
+
+         ["x"] "[#+(and) \"x\"]"
+         ["x"] "[#+(and clj) \"x\"]"
+         ["x"] "[#+(and clj clj) \"x\"]"
+         [] "[#+(and clj cljs) \"x\"]"
+
+         [] "[#+(or) \"x\"]"
+         ["x"] "[#+(or clj) \"x\"]"
+         ["x"] "[#+(or clj cljs) \"x\"]"
+         []   "[#+(or cljs) \"x\"]"
+
+         ["x"] "[#+(not cljs) \"x\"]"
+
+         nil "#+cljs #js {} nil"
+         :foo "#+cljs #js {} :foo"
+
+         "x" "#+cljs [:foo #bar 123 :baz] #+clj \"x\""
+
+         :foo/bar "#-clj :baz :foo/bar"
+         :baz "#-cljs :baz"
+         :x "#-(not clj) :x"
+
+         [] "[#-(and) \"x\"]"
+         [] "[#-(and clj) \"x\"]"
+         [] "[#-(and clj clj) \"x\"]"
+         ["x"] "[#-(and clj cljs) \"x\"]"
+
+         ["x"] "[#-(or) \"x\"]"
+         [] "[#-(or clj) \"x\"]"
+         [] "[#-(or clj cljs) \"x\"]"
+         ["x"] "[#-(or cljs) \"x\"]"
+
+         "foo"         "#+cljs \"bar\" \"foo\""
+         "foo"         "#+cljs #js \"bar\" \"foo\""
+         ["foo"]       "[ #+cljs \"bar\" \"foo\"]"
+         []            "[ #+cljs \"bar\"]")))
